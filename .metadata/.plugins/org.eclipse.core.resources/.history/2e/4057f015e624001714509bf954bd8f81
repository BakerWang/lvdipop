/**
 * 版权：Copyright (C) 2015  易族智汇（北京）科技有限公司.
 * 本系统是商用软件,未经授权擅自复制或传播本程序的部分或全部将是非法的.
 * 描述：商品api  
 * 修改人：Sylow  
 * 修改时间：2015-08-22
 * 修改内容：增加获得商品标签api
 */
package com.enation.app.shop.mobile.action.goods;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import com.enation.app.base.core.model.Member;
import com.enation.app.shop.component.gallery.model.GoodsGallery;
import com.enation.app.shop.component.gallery.service.IGoodsGalleryManager;
import com.enation.app.shop.core.goods.model.Attribute;
import com.enation.app.shop.core.goods.model.Goods;
import com.enation.app.shop.core.goods.model.Product;
import com.enation.app.shop.core.goods.model.Specification;
import com.enation.app.shop.core.goods.model.support.ParamGroup;
import com.enation.app.shop.core.goods.service.GoodsTypeUtil;
import com.enation.app.shop.core.goods.service.IGoodsManager;
import com.enation.app.shop.core.goods.service.IGoodsSearchManager;
import com.enation.app.shop.core.goods.service.IGoodsTypeManager;
import com.enation.app.shop.core.goods.service.IProductManager;
import com.enation.app.shop.core.goods.utils.UrlUtils;
import com.enation.app.shop.core.member.service.IFavoriteManager;
import com.enation.app.shop.core.member.service.IMemberCommentManager;
import com.enation.app.shop.mobile.model.ApiGoods;
import com.enation.app.shop.mobile.service.ApiGoodsManager;
import com.enation.app.shop.mobile.utils.CommonRequest;
import com.enation.eop.SystemSetting;
import com.enation.eop.sdk.context.UserConext;
import com.enation.eop.sdk.utils.StaticResourcesUtil;
import com.enation.framework.action.JsonResult;
import com.enation.framework.context.webcontext.ThreadContextHolder;
import com.enation.framework.database.Page;
import com.enation.framework.util.JsonResultUtil;
import com.enation.framework.util.StringUtil;

/**
 * 商品api
 * 
 * @author hoser
 * @date 2015-07-15
 * @version v1.1 2016-04-10
 * @since v1.1
 */
@Controller
@Scope("prototype")
@RequestMapping("/api/mobile/goods")
public class GoodsMobileApiController {
	protected final Logger logger = Logger.getLogger(GoodsMobileApiController.class);
	@Autowired
	private IGoodsManager goodsManager;
	@Autowired
	private IGoodsGalleryManager goodsGalleryManager;
	@Autowired
	private IProductManager productManager;
	@Autowired
	private IMemberCommentManager memberCommentManager;
	@Autowired
	private IFavoriteManager favoriteManager;
	@Autowired
	private IGoodsSearchManager goodsSearchManager;
	@Autowired
	private IGoodsTypeManager goodsTypeManager;
	@Autowired
	private ApiGoodsManager apiGoodsManager;
	private final int PAGE_SIZE = 20;

	/**
	 * 根据标签获得商品列表
	 * 
	 * @author Sylow
	 * @param <b>catid</b>:分类id.int型，必填项
	 * @param <b>tagid</b>:标签id，int型，必填项
	 * @param <b>goodsnum</b>:数量，int型，必填项
	 * @return 返回json串 <br />
	 *         <b>result</b>: 1表示添加成功0表示失败 ，int型 <br />
	 *         <b>message</b>: 提示信息 <br />
	 *         <b>data</b>: 商品列表数据
	 */
	@SuppressWarnings("rawtypes")
	@ResponseBody
	@RequestMapping(value="/list-by-tag.do",produces= MediaType.APPLICATION_JSON_VALUE)
	public JsonResult listByTag(HttpServletRequest request) {
		try {
			String catid = (String) request.getParameter("catid");
			String tagid = (String) request.getParameter("tagid");
			String goodsnum = (String) request.getParameter("goodsnum");
			if (catid == null || catid.equals("")) {
				String uri = ThreadContextHolder.getHttpRequest().getServletPath();
				catid = UrlUtils.getParamStringValue(uri, "cat");
			}
			List<Map> goodsList = goodsManager.listByCat(tagid, catid, goodsnum);
			return JsonResultUtil.getObjectJson(goodsList);

		} catch (RuntimeException e) {
			this.logger.error("获取商品列表出错", e);
			return JsonResultUtil.getErrorJson(e.getMessage());
		}
	}

	/**
	 * 商品列表
	 * 
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("rawtypes")
	@ResponseBody
	@RequestMapping(value="/list.do",produces= MediaType.APPLICATION_JSON_VALUE)
	public JsonResult list() {
		try {
			List<ApiGoods> goodsList = new ArrayList<ApiGoods>();
			List<Map> list = goodsManager.list();
			for (int i = 0; i < list.size(); i++) {
				Map map = (Map) list.get(i);
				ApiGoods goods = new ApiGoods();
				BeanUtils.populate(goods, map);
				goodsList.add(goods);
			}
			return JsonResultUtil.getObjectJson(goodsList);

		} catch (RuntimeException e) {
			this.logger.error("获取商品列表出错", e);
			return JsonResultUtil.getErrorJson(e.getMessage());

		} catch (IllegalAccessException e) {
			this.logger.error("获取商品列表出错", e);
			return JsonResultUtil.getErrorJson(e.getMessage());

		} catch (InvocationTargetException e) {
			this.logger.error("获取商品列表出错", e);
			return JsonResultUtil.getErrorJson(e.getMessage());
		}
	}

	
	/**
	 * 搜索商品
	 * @author Sylow
	 * @param <b>catid</b>:分类id.int型,可为空
	 * @param <b>goods_name</b>:商品名称,String,可为空
	 * @param <b>sort</b>:排序名.String,可为空
	 * @param <b>order</b>:正序倒序关键字,String,可为空
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@ResponseBody
	@RequestMapping(value="/search.do",produces= MediaType.APPLICATION_JSON_VALUE)
	public JsonResult search(HttpServletRequest request,
			@RequestParam(value = "pageNo", required = false, defaultValue = "1") Integer pageNo,
			@RequestParam(value = "pageSize", required = false, defaultValue = "10")Integer pageSize){
		try {
			Object catId = request.getParameter("catid");
			Object storeId = request.getParameter("store_id");
			String goodsName = (String) request.getParameter("goods_name");
			String goods_recommend = (String) request.getParameter("goods_recommend");
			String sort = (String) request.getParameter("sort");
			String order = (String) request.getParameter("order");
			// 默认值
			if (order == null || "".equals(sort)) {
				order = "desc";
			}
			if (sort == null) {
				sort = "";
			}
			Map<String, Object> param = new HashMap<String, Object>();
			if (catId != null) {//分类ID
				param.put("catid", Integer.parseInt(catId.toString()));
			}
			if (storeId != null) {//店铺ID
				param.put("store_id", Integer.parseInt(storeId.toString()));
			}
			if (goods_recommend != null) {//是否为推荐商品
				param.put("goods_recommend", Integer.parseInt(goods_recommend));
			}
			param.put("goods_name", goodsName);//商品名称
			Page webPage = goodsManager.searchGoods(param, sort, order,pageNo,pageSize);
			List<Goods> goodsList = (List<Goods>) webPage.getResult();
			for (Goods goods : goodsList) {
				goods.setOriginal(StaticResourcesUtil.convertToUrl((String) goods.getOriginal()));
				goods.setBig(StaticResourcesUtil.convertToUrl((String) goods.getBig()));
				goods.setSmall(StaticResourcesUtil.convertToUrl((String) goods.getSmall()));
				goods.setThumbnail(StaticResourcesUtil.convertToUrl((String) goods.getThumbnail()));
				goods.setStore_logo(StaticResourcesUtil.convertToUrl((String) goods.getStore_logo()));
			}
			webPage.setCurrentPageNo(pageNo);
			return JsonResultUtil.getObjectJson(webPage);
		} catch (RuntimeException e) {
			this.logger.error("搜索商品出错", e);
			return JsonResultUtil.getErrorJson(e.getMessage());
		}
	}

	/**
	 * 商品详细
	 * 
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@ResponseBody
	@RequestMapping(value="/detail.do",produces= MediaType.APPLICATION_JSON_VALUE)
	public JsonResult detail(HttpServletRequest request) {
		try {
			int goods_id = NumberUtils.toInt(request.getParameter("goods_id"), 0);
			Map<String, Object> productMap;
			Product product = productManager.getByGoodsId(goods_id);
			productMap = BeanUtils.describe(product);
			Map goods = goodsManager.get(goods_id);
			productMap.put("total_enable_store", goods.get("enable_store"));
			productMap.put("thumbnail", StaticResourcesUtil.convertToUrl(goods.get("thumbnail").toString()));
			productMap.put("intro", goods.get("intro"));
			productMap.put("goods_recommend",goods.get("goods_recommend"));
			productMap.put("mktprice", goods.get("mktprice"));
			productMap.put("buy_count",goods.get("buy_count"));
			int commentCount = memberCommentManager.getCommentsCount(goods_id);
			int goodCommentCount = memberCommentManager.getCommentsCount(goods_id, 3);
			productMap.put("comment_count", commentCount);
			if (commentCount > 0) {
				java.text.NumberFormat percentFormat = java.text.NumberFormat.getPercentInstance();
				percentFormat.setMaximumFractionDigits(0); // 最大小数位数
				percentFormat.setMaximumIntegerDigits(2);// 最大整数位数
				percentFormat.setMinimumFractionDigits(0); // 最小小数位数
				percentFormat.setMinimumIntegerDigits(1);// 最小整数位数
				productMap.put("comment_percent", percentFormat.format((float) (goodCommentCount / 1)));
			} else {
				productMap.put("comment_percent", "100%");
			}
			// 是否已收藏
//			Member member = UserConext.getCurrentMember();
			Integer memberId = CommonRequest.getMemberID();
			if (memberId == null) {
				productMap.put("favorited", false);
			} else {
				productMap.put("favorited", favoriteManager.isFavorited(goods_id, memberId));
			}
			//商品相册
			List<GoodsGallery> galleryList = goodsGalleryManager.list(goods_id);
			if (galleryList == null || galleryList.size() == 0) {
				String img = SystemSetting.getDefault_img_url();
				GoodsGallery gallery = new GoodsGallery();
				gallery.setSmall(img);
				gallery.setBig(img);
				gallery.setThumbnail(img);
				gallery.setTiny(img);
				gallery.setOriginal(img);
				gallery.setIsdefault(1);
				galleryList.add(gallery);
			}
			productMap.put("imgList", galleryList);
			List<Product> productList = this.productManager.list(goods_id);
			if (("" + goods.get("have_spec")).equals("0")) {
				productMap.put("productid", productList.get(0).getProduct_id());// 商品的货品id
				productMap.put("productList", productList);// 商品的货品列表
			} else {
				List<Specification> specList = this.productManager.listSpecs(goods_id);
				productMap.put("specList", specList);// 商品规格数据列表
				productMap.put("productList", productList);// 商品的货品列表
			}
			productMap.put("have_spec", goods.get("have_spec") == null ? 0 : goods.get("have_spec"));// 是否有规格
			productMap.put("store_id", goods.get("store_id"));
			return JsonResultUtil.getObjectJson(productMap);
		} catch (Exception e) {
			this.logger.error("获取商品详情出错", e);
			return JsonResultUtil.getErrorJson(e.getMessage());
		} 
	}

	/**
	 * 商品相册
	 * 
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="/gallery.do",produces= MediaType.APPLICATION_JSON_VALUE)
	public JsonResult gallery(HttpServletRequest request) {
		try {
			int goods_id = NumberUtils.toInt(request.getParameter("id"), 0);
			List<GoodsGallery> galleryList = this.goodsGalleryManager.list(goods_id);
			if (galleryList == null || galleryList.size() == 0) {
				String img = SystemSetting.getDefault_img_url();
				GoodsGallery gallery = new GoodsGallery();
				gallery.setSmall(img);
				gallery.setBig(img);
				gallery.setThumbnail(img);
				gallery.setTiny(img);
				gallery.setOriginal(img);
				gallery.setIsdefault(1);
				galleryList.add(gallery);
			}
			return JsonResultUtil.getObjectJson(galleryList);
		} catch (RuntimeException e) {
			this.logger.error("获取商品相册出错", e);
			return JsonResultUtil.getErrorJson(e.getMessage());
		}
	}

	/**
	 * 商品规格
	 * 
	 * @return
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@ResponseBody
	@RequestMapping(value="/spec.do",produces= MediaType.APPLICATION_JSON_VALUE)
	public JsonResult spec(HttpServletRequest request) {
		try {
			int goods_id = NumberUtils.toInt(request.getParameter("goods_id"), 0);
			Map goods = goodsManager.get(goods_id);
			List<Product> productList = this.productManager.list(goods_id);
			Map data = new HashMap();
			if (("" + goods.get("have_spec")).equals("0")) {
				data.put("productid", productList.get(0).getProduct_id());// 商品的货品id
				data.put("productList", productList);// 商品的货品列表
			} else {
				List<Specification> specList = this.productManager.listSpecs(goods_id);
				data.put("specList", specList);// 商品规格数据列表
				data.put("productList", productList);// 商品的货品列表
			}
			data.put("have_spec", goods.get("have_spec") == null ? 0 : goods.get("have_spec"));// 是否有规格
			return JsonResultUtil.getObjectJson(data);
		} catch (RuntimeException e) {
			this.logger.error("获取商品规格出错", e);
			return JsonResultUtil.getErrorJson(e.getMessage());
		}
	}

	/**
	 * 商品评论
	 * 
	 * @return
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@ResponseBody
	@RequestMapping(value="/comment.do",produces= MediaType.APPLICATION_JSON_VALUE)
	public JsonResult comment(HttpServletRequest request) {
		try {
			int goods_id = NumberUtils.toInt(request.getParameter("id"), 0);
			int type = NumberUtils.toInt(request.getParameter("type"), 1);
			int page = NumberUtils.toInt(request.getParameter("page"), 1);
			Page pageData = memberCommentManager.getGoodsComments(goods_id, page, PAGE_SIZE, type);
			List list = (List) pageData.getResult();
			for (int i = 0; i < list.size(); i++) {
				Map<String, Object> map = (Map<String, Object>) list.get(i);
				if (map.containsKey("face") && map.get("face") != null) {
					map.put("face", StaticResourcesUtil.convertToUrl(map.get("face").toString()));
				}
			}
			return JsonResultUtil.getObjectJson(list);
		} catch (RuntimeException e) {
			this.logger.error("获取商品评论出错", e);
			return JsonResultUtil.getErrorJson(e.getMessage());
		}
	}

	/**
	 * 商品属性
	 * 
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="/attr-list.do",produces= MediaType.APPLICATION_JSON_VALUE)
	public JsonResult attrList(HttpServletRequest request) {
		try {
			Integer goodsid = NumberUtils.toInt(request.getParameter("id"), 0);
			Map goodsmap =this.goodsManager.get(goodsid);
			Integer typeid = (Integer) goodsmap.get("type_id");
			List<Attribute> list = this.goodsTypeManager.getAttrListByTypeId(typeid);
			List attrList = new ArrayList();
			int i=1;
			for(Attribute attribute:list){
				Map attrmap = new HashMap();
				if(attribute.getType()==3){
					String[] s = attribute.getOptionAr();
					String p = (String) goodsmap.get("p"+i);
					Integer num=0;
					if(!StringUtil.isEmpty(p)){
						num=Integer.parseInt(p);
					}
					attrmap.put("attrName", attribute.getName());
					attrmap.put("attrValue", s[num]);
				}else if(attribute.getType()==6){
					attrmap.put("attrName", attribute.getName());
					String value=goodsmap.get("p"+i).toString().replace("#", ",").substring(1);
					attrmap.put("attrValue",value);
				}else{
					attrmap.put("attrName", attribute.getName());
					attrmap.put("attrValue", goodsmap.get("p"+i));
				}
				attrList.add(attrmap);
				i++;
			}
			return JsonResultUtil.getObjectJson(attrList);
		} catch (RuntimeException e) {
			this.logger.error("获取商品相册出错", e);
			return JsonResultUtil.getErrorJson(e.getMessage());
		}
	}
	
	/**
	 * 商品参数
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="/parame-list.do",produces= MediaType.APPLICATION_JSON_VALUE)
	public JsonResult parameList(HttpServletRequest request) {
		JsonResult jsonResult=new JsonResult();
		try {
			Integer goodsid = NumberUtils.toInt(request.getParameter("id"), 0);
			Map goodsmap =this.goodsManager.get(goodsid);
			String goodParams  =(String)goodsmap.get("params");
			Map result = new HashMap();
			if(goodParams!=null && !goodParams.equals("")){
				ParamGroup[] paramList =GoodsTypeUtil.converFormString(goodParams);
				result.put("paramListss", paramList);
				if(paramList!=null && paramList.length>0) {
					result.put("hasParam", true);
				} else {
					result.put("hasParam", false);
				}
			}else{
				result.put("hasParam", false);
			}
			if(result.get("paramListss") == null){
				jsonResult.setResult(1);
				jsonResult.setData("[{paramListss:[]}]");
				return jsonResult; 
			}else{	
				return JsonResultUtil.getObjectJson(result);
			}
		} catch (RuntimeException e) {
			this.logger.error("获取商品相册出错", e);
			return JsonResultUtil.getErrorJson(e.getMessage());
		}
	}

}
