package com.bizdata.reserve.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.bizdata.commons.constant.ConstantMessage;
import com.bizdata.commons.utils.JsonMessageUtil;
import com.bizdata.framework.exception.PageConditionException;
import com.bizdata.framework.exception.SearchConditionException;
import com.bizdata.framework.exception.SortConditionException;
import com.bizdata.reserve.domain.Contacts;
import com.bizdata.reserve.domain.ContactsType;
import com.bizdata.reserve.service.ContactsService;
import com.bizdata.reserve.service.ContactsTypeService;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

/**
 *
 * @author csh
 * @date 创建时间：2016年6月1日下午1:57:21
 *
 */
@Controller
@RequestMapping(value = "/admin/contacts")
public class ContactsController {

    @Autowired
    private ContactsService contactsService;

    @Autowired
    private ContactsTypeService contactsTypeService;

    @Autowired
    private JsonMessageUtil jsonMessageUtil;

    @RequiresPermissions("user:reserve:contacts")
    @RequestMapping(method = RequestMethod.GET)
    public ModelAndView list() {
        ModelAndView mv = new ModelAndView("/reserve/contacts_list");
        List<ContactsType> types = contactsTypeService.selectAll();
        mv.addObject("types", types);
        return mv;
    }
    
    @ResponseBody
    @RequiresPermissions("user:reserve:contacts")
    @RequestMapping(value = "/list", method = RequestMethod.GET)
    public String list(Contacts contacts)
            throws SortConditionException, PageConditionException, SearchConditionException {
        Map<String, Object> contactsMap = new HashMap<String, Object>();
        Page<Contacts> pageInfo = contactsService.findAll(contacts, null);
        contactsMap.put("rows", pageInfo.getContent());
        contactsMap.put("currentPage", contacts.getCurrentPage());
        contactsMap.put("totalPageSize", pageInfo.getTotalPages());
        contactsMap.put("totalRecords", pageInfo.getTotalElements());
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd H:m:s").create();
        return gson.toJson(contactsMap);
    }

    @RequiresPermissions("user:contacts:create")
    @RequestMapping(value = "/create", method = RequestMethod.GET)
    public ModelAndView create(Model model) {
        ModelAndView modelAndView = new ModelAndView("/reserve/contacts_update");
        modelAndView.addObject("contacts", new Contacts());
        List<ContactsType> contactsType_list = contactsTypeService.selectAll();
        model.addAttribute("contactsType_list", contactsType_list);
        return modelAndView;
    }
    
    @ResponseBody
    @RequiresPermissions("user:contacts:create")
    @RequestMapping(value = "/create", method = RequestMethod.POST)
    public String create(Contacts contacts) {
        String json = "";
        try {
            // 联系人新增操作
            contactsService.insert(contacts);
            json = jsonMessageUtil.setSuccessJson(ConstantMessage.success);
        } catch (Exception e) {
            e.printStackTrace();
            json = jsonMessageUtil.setErrorJson("联系人新增失败！");
        }
        return json;
    }

    @RequiresPermissions("user:contacts:delete")
    @RequestMapping(value = "/delete", method = RequestMethod.POST)
    @ResponseBody
    public String delete(Contacts contacts) {
        String json = "";
        try {
            // 删除操作
            contactsService.deleteByPrimaryKey(contacts.getId());
            json = jsonMessageUtil.setSuccessJson(ConstantMessage.success);
        } catch (Exception e) {
            e.printStackTrace();
            json = jsonMessageUtil.setErrorJson("联系人删除失败!");
        }
        return json;
    }

    @RequiresPermissions("user:contacts:update")
    @RequestMapping(value = "/update/{id}", method = RequestMethod.GET)
    public ModelAndView update(@PathVariable String id) {
    	ModelAndView mv=new ModelAndView("/reserve/contacts_update");
        Contacts contacts = contactsService.selectByPrimaryKey(id);
        mv.addObject("contacts", contacts);
        // 查询电话类型
        List<ContactsType> contactsType_list = contactsTypeService.selectAll();
        mv.addObject("contactsType_list", contactsType_list);
        return mv;
    }
    
    @RequiresPermissions("user:contacts:update")
    @RequestMapping(value = "/show/{id}", method = RequestMethod.GET)
    public ModelAndView show(@PathVariable String id) {
    	ModelAndView mv=new ModelAndView("/reserve/contacts_show");
        Contacts contacts = contactsService.selectByPrimaryKey(id);
        mv.addObject("contacts", contacts);
        // 查询电话类型
        List<ContactsType> contactsType_list = contactsTypeService.selectAll();
        mv.addObject("contactsType_list", contactsType_list);
        return mv;
    }

    @ResponseBody
    @RequiresPermissions("user:contacts:update")
    @RequestMapping(value = "/update", method = RequestMethod.POST)
    public String update(Contacts contacts, Model model) {
        String json = "";
        try {
            // 更新操作
            contactsService.updateByPrimaryKey(contacts);
            json = jsonMessageUtil.setSuccessJson(ConstantMessage.success);
        } catch (Exception e) {
            e.printStackTrace();
            json = jsonMessageUtil.setErrorJson("联系人更新失败!");
        }
        return json;
    }

    @RequiresPermissions("user:contacts:view")
    @RequestMapping(value = "/view/{id}", method = RequestMethod.GET)
    public ModelAndView view(@PathVariable String id) {
    	ModelAndView mv=new ModelAndView("/reserve/contacts_view");
        Contacts contacts = contactsService.selectByPrimaryKey(id);
        mv.addObject("contacts", contacts);
        // 查询电话类型
        List<ContactsType> contactsType_list = contactsTypeService.selectAll();
        mv.addObject("contactsType_list", contactsType_list);
        return mv;
    }
    
    
    
    @RequestMapping(value = "/exportList",method = RequestMethod.GET)
    public String exportList(HttpServletRequest request, HttpServletResponse response){
    	
    	
    	return null;
    }

}
