/**
 *
 */
package com.bizdata.management.controller;

import java.util.HashMap;
import java.util.Map;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.bizdata.commons.constant.ConstantMessage;
import com.bizdata.commons.utils.JsonMessageUtil;
import com.bizdata.framework.exception.PageConditionException;
import com.bizdata.framework.exception.SearchConditionException;
import com.bizdata.framework.exception.SortConditionException;
import com.bizdata.management.domain.AgreementType;
import com.bizdata.management.service.AgreementTypeService;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

/**  
* Class explanation:  
* 
* @author whc  
* @date Dec 21, 2016  new-built  
* 
*/
@Controller
@RequestMapping(value = "/admin/agreement_agreementType")
public class AgreementTypeController {

    @Autowired
    private AgreementTypeService agreementTypeService;

    @Autowired
    public JsonMessageUtil jsonMessageUtil;
    /*
    @InitBinder
    protected void initBinder(WebDataBinder binder) {
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        CustomDateEditor dateEditor = new CustomDateEditor(df, true);
        // 表示如果命令对象有Date类型的属性，将使用该属性编辑器进行类型转换
        binder.registerCustomEditor(Date.class, dateEditor);
    }
    */

    /**
     * 分页查询
     */
    @RequiresPermissions("root:agreement:agreementType")
    @RequestMapping(method = RequestMethod.GET)
    public ModelAndView list() {
        return new ModelAndView("/management/agreementType_list");
    }

    @RequiresPermissions("root:agreement:agreementType")
    @RequestMapping(value = "list", method = RequestMethod.GET)
    @ResponseBody
    public String agreementTypeList(AgreementType agreementType)
            throws SortConditionException, PageConditionException, SearchConditionException {
        Map<String, Object> agreementTypeMap = new HashMap<String, Object>();
        Page<AgreementType> pageInfo = agreementTypeService.findAllByPage(agreementType);
        agreementTypeMap.put("rows", pageInfo.getContent());
        agreementTypeMap.put("currentPage", agreementType.getCurrentPage());
        agreementTypeMap.put("totalPageSize", pageInfo.getTotalPages());
        agreementTypeMap.put("totalRecords", pageInfo.getTotalElements());
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd H:m:s").create();
        return gson.toJson(agreementTypeMap);
    }
    /*
    @RequiresPermissions("root:activity:activityLabel_add")
    @RequestMapping(value = "/create", method = RequestMethod.GET)
    public ModelAndView create(Model model) {
        ModelAndView modelAndView = new ModelAndView("/activity/activityLabel_update");
        modelAndView.addObject("activityLabel", new ActivityLabel());

        return modelAndView;
    }
    */

    /**
     * 新增记录
     */
    @RequiresPermissions("root:agreement:agreementType_add")
    @ResponseBody
    @RequestMapping(value = "/create", method = RequestMethod.POST)
    public String create(AgreementType agreementType) {
        String json = "";
        try {
        	agreementTypeService.save(agreementType);
            json = jsonMessageUtil.setSuccessJson(ConstantMessage.sendSuccess);
        } catch (Exception e) {
            e.printStackTrace();
            json = jsonMessageUtil.setErrorJson("记录添加失败...");
        }
        return json;
    }
    /*
    @RequiresPermissions("root:activity:activityLabel_update")
    @RequestMapping(value = "/update/{id}", method = RequestMethod.GET)
    public ModelAndView update(Model model, @PathVariable String id) {
    	ActivityLabel activityLabel = activityLabelService.selectByPrimaryKey(id);
        model.addAttribute("activityLabel", activityLabel);

        return new ModelAndView("/activity/activityLabel_update");
    }
	*/
    
    /**
     * 修改记录
     */
    @ResponseBody
    @RequiresPermissions("root:agreement:agreementType_update")
    @RequestMapping(value = "/update", method = RequestMethod.POST)
    public String update(AgreementType agreementType) {
        String json = "";
        try {
        	agreementTypeService.update(agreementType);
            json = jsonMessageUtil.setSuccessJson(ConstantMessage.sendSuccess);
        } catch (Exception e) {
            e.printStackTrace();
            json = jsonMessageUtil.setErrorJson("记录修改失败...");
        }
        return json;
    }

    /**
     * 删除记录
     */
    @RequiresPermissions("root:agreement:agreementType_delete")
    @ResponseBody
    @RequestMapping(value = "/delete", method = RequestMethod.POST)
    public String delete(AgreementType agreementType) {
        String json = "";
        try {
        	agreementTypeService.delete(agreementType.getId());
            json = jsonMessageUtil.setSuccessJson(ConstantMessage.sendSuccess);
        } catch (Exception e) {
            e.printStackTrace();
            json = jsonMessageUtil.setErrorJson("记录删除失败...");
        }
        return json;
    }

    /**
     * 查看记录
     */
    /*
    @RequiresPermissions("root:activity:activityLabel_view")
    @RequestMapping(value = "/view/{id}", method = RequestMethod.GET)
    public ModelAndView select(Model model, @PathVariable String id) {
    	ActivityLabel activityLabel = activityLabelService.selectByPrimaryKey(id);
        model.addAttribute("activityLabel", activityLabel);
        return new ModelAndView("/activity/activityLabel_view");
    }
     */

}
