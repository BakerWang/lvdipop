/**
 * 
 */
package com.bizdata.management.controller;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.bizdata.commons.utils.JsonMessageUtil;
import com.bizdata.commons.utils.JsonResultUtils;
import com.bizdata.commons.utils.Utils;
import com.bizdata.framework.exception.PageConditionException;
import com.bizdata.framework.exception.SearchConditionException;
import com.bizdata.framework.exception.SortConditionException;
import com.bizdata.management.domain.File_Management;
import com.bizdata.management.domain.File_Type;
import com.bizdata.management.service.File_ManagementService;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

/**   
 * 
 * @author caojie 
 * @date 2016年10月17日下午4:17:55
 * 
 */
@Controller
@RequestMapping(value="/admin/file")
@ConfigurationProperties(prefix = "qiniu")
public class File_ManagementController {
	@Autowired
	private File_ManagementService file_ManagementService;
	
	@Autowired
    public JsonMessageUtil jsonMessageUtil;
	
	@InitBinder
    protected void initBinder(WebDataBinder binder) {
        // 表示如果命令对象有Date类型的属性，将使用该属性编辑器进行类型转换
        binder.registerCustomEditor(Date.class, new CustomDateEditor(new SimpleDateFormat("yyyy-MM-dd hh:mm:ss"), true));
    }
	
	@Autowired
    public Utils utils;
	private String savehttp;

    private String savepath;
    
    
    /**
	 * @return the savehttp
	 */
	public String getSavehttp() {
		return savehttp;
	}

	/**
	 * @param savehttp the savehttp to set
	 */
	public void setSavehttp(String savehttp) {
		this.savehttp = savehttp;
	}

	/**
	 * @return the savepath
	 */
	public String getSavepath() {
		return savepath;
	}

	/**
	 * @param savepath the savepath to set
	 */
	public void setSavepath(String savepath) {
		this.savepath = savepath;
	}
	
	
	
	
	@RequestMapping(method=RequestMethod.GET)
	private ModelAndView list(){
		ModelAndView mv=new ModelAndView("/file/file_list");
		List<File_Type> list=new ArrayList<File_Type>();
		list=file_ManagementService.findType();
		mv.addObject("list", list);
		return mv;
	}
	
	@RequestMapping(value="/list")
	@ResponseBody
	public String findAllByPage(File_Management file)
			throws SortConditionException, PageConditionException, SearchConditionException{
		Map<String,Object> map=new HashMap<String, Object>();
		Page<File_Management> li=file_ManagementService.findAll(file,null);
		map.put("rows", li.getContent());
		map.put("currentPage", file.getCurrentPage());
		map.put("totalPageSize", li.getTotalPages());
		map.put("totalRecords", li.getTotalElements());
		Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd H:m:s").create();
		return gson.toJson(map);
	}
	
	@ResponseBody
	@RequestMapping(value = "/create",method = RequestMethod.GET)
	public ModelAndView create(){
		ModelAndView mv= new ModelAndView("/file/file_create");
		mv.addObject("file",new File_Management());
		List<File_Type> list=new ArrayList<File_Type>();
		list=file_ManagementService.findType();
		mv.addObject("list", list);
		return mv;
	}
	
	@RequestMapping(value="/create",method=RequestMethod.POST)
	@ResponseBody
	public String create(File_Management file){
		String json = "";
		if(file!=null){
			try {
				File_Management file_Management=new File_Management();
				if(file.getId()!=null&&!"".equals(file.getId())){
					file_Management=file_ManagementService.findFile_Management(file.getId());
				}
				file_Management.setFile_number(file.getFile_number());
				file_Management.setFile_title(file.getFile_title());
				file_Management.setFile_type(file.getFile_type());
				file_Management.setFile(file.getFile());
				file_Management.setFile_details(file.getFile_details());
				file_Management.setDate(new Date());
				file_Management.setFilename(file.getFilename());
				file_ManagementService.create(file_Management);
				json = JsonResultUtils.success("新增文件成功");
			} catch (Exception e) {
				json = JsonResultUtils.error("信息不完整，请确认后重新提交");
			}
		}
		return json;
	}
	
	@RequestMapping(value = "/update/{id}",method = RequestMethod.GET)
    public ModelAndView update(@PathVariable String id) {
		ModelAndView mv=new ModelAndView("/file/file_create");
		File_Management file_Management = file_ManagementService.findFile_Management(id);
		mv.addObject("file",file_Management);
		List<File_Type> list=new ArrayList<File_Type>();
		list=file_ManagementService.findType();
		mv.addObject("list", list);
		return mv;
    }
	
	@RequestMapping(value = "/show/{id}",method = RequestMethod.GET)
    public ModelAndView show(@PathVariable String id) {
		ModelAndView mv=new ModelAndView("/file/file_show");
		File_Management file_Management = file_ManagementService.findFile_Management(id);
		mv.addObject("file",file_Management);
		List<File_Type> list=new ArrayList<File_Type>();
		list=file_ManagementService.findType();
		mv.addObject("list", list);
		return mv;
    }
	
	@RequestMapping(value="delete")
	@ResponseBody
	public String delete(File_Management file){
		String json="";
		if(file.getId()!=null&&!"".equals(file.getId())){
			try {
				file_ManagementService.deleteOne(file.getId());
				json = JsonResultUtils.success("删除成功");
			} catch (Exception e) {
				json = JsonResultUtils.error("删除失败");
			}
		}
		return json;
	}
	
	@RequestMapping("/uploadpic")
    @ResponseBody
    public String fileUpload(HttpServletRequest request, HttpServletResponse response) {
        String img = "";
        String json = "";
        // 判断是否是multipart类型的请求。
        if (request instanceof MultipartHttpServletRequest) {
            MultipartHttpServletRequest mrequest = (MultipartHttpServletRequest) request;

            Iterator<String> it = mrequest.getFileNames();

            // 获取他文件上传的对象
            String fileName = it.next();
            MultipartFile multipartFile = mrequest.getFile(fileName);
            String time = new SimpleDateFormat("yyyyMMddHHMMSS").format(new Date());
            String  path = savepath + time + "/";
            File f = new File(path);
            if (!f.exists()) {
                f.mkdirs();
            }
            String filename = utils.saveFile(multipartFile, path);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("img", savehttp + time + "/" + filename);
            map.put("imgname",multipartFile.getOriginalFilename());
            json = jsonMessageUtil.setSuccessJson("上传成功", map);

        } else {
            json = jsonMessageUtil.setErrorJson("上传失败");
        }
        return json;
    }
}
